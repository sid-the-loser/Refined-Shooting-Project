//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Ingame"",
            ""id"": ""6ead090b-7e83-4e98-bb2e-3dd299876a50"",
            ""actions"": [
                {
                    ""name"": ""butt1"",
                    ""type"": ""Button"",
                    ""id"": ""111cd7b1-2fd9-4f12-9a73-3eb719373f21"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""butt2"",
                    ""type"": ""Button"",
                    ""id"": ""75b55cf0-9fb5-4b7f-b381-6c3936833ad3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""butt3"",
                    ""type"": ""Button"",
                    ""id"": ""328ca0b3-61ad-4dc4-b6a1-a36f9b130f85"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""53eec967-451f-47ec-89f1-9fd4285dc7b6"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""butt1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""78cdfe77-762f-43fd-9f01-4323c6478fb6"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""butt2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f4c28643-9025-41c5-acf5-7e80976ce8e7"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""butt3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Ingame
        m_Ingame = asset.FindActionMap("Ingame", throwIfNotFound: true);
        m_Ingame_butt1 = m_Ingame.FindAction("butt1", throwIfNotFound: true);
        m_Ingame_butt2 = m_Ingame.FindAction("butt2", throwIfNotFound: true);
        m_Ingame_butt3 = m_Ingame.FindAction("butt3", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Ingame
    private readonly InputActionMap m_Ingame;
    private List<IIngameActions> m_IngameActionsCallbackInterfaces = new List<IIngameActions>();
    private readonly InputAction m_Ingame_butt1;
    private readonly InputAction m_Ingame_butt2;
    private readonly InputAction m_Ingame_butt3;
    public struct IngameActions
    {
        private @Controls m_Wrapper;
        public IngameActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @butt1 => m_Wrapper.m_Ingame_butt1;
        public InputAction @butt2 => m_Wrapper.m_Ingame_butt2;
        public InputAction @butt3 => m_Wrapper.m_Ingame_butt3;
        public InputActionMap Get() { return m_Wrapper.m_Ingame; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(IngameActions set) { return set.Get(); }
        public void AddCallbacks(IIngameActions instance)
        {
            if (instance == null || m_Wrapper.m_IngameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_IngameActionsCallbackInterfaces.Add(instance);
            @butt1.started += instance.OnButt1;
            @butt1.performed += instance.OnButt1;
            @butt1.canceled += instance.OnButt1;
            @butt2.started += instance.OnButt2;
            @butt2.performed += instance.OnButt2;
            @butt2.canceled += instance.OnButt2;
            @butt3.started += instance.OnButt3;
            @butt3.performed += instance.OnButt3;
            @butt3.canceled += instance.OnButt3;
        }

        private void UnregisterCallbacks(IIngameActions instance)
        {
            @butt1.started -= instance.OnButt1;
            @butt1.performed -= instance.OnButt1;
            @butt1.canceled -= instance.OnButt1;
            @butt2.started -= instance.OnButt2;
            @butt2.performed -= instance.OnButt2;
            @butt2.canceled -= instance.OnButt2;
            @butt3.started -= instance.OnButt3;
            @butt3.performed -= instance.OnButt3;
            @butt3.canceled -= instance.OnButt3;
        }

        public void RemoveCallbacks(IIngameActions instance)
        {
            if (m_Wrapper.m_IngameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IIngameActions instance)
        {
            foreach (var item in m_Wrapper.m_IngameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_IngameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public IngameActions @Ingame => new IngameActions(this);
    public interface IIngameActions
    {
        void OnButt1(InputAction.CallbackContext context);
        void OnButt2(InputAction.CallbackContext context);
        void OnButt3(InputAction.CallbackContext context);
    }
}
